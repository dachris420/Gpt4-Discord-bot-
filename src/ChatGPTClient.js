const { EmbedBuilder, Colors } = require('discord.js');

class ChatGPTClient {
  constructor(apiClient, options) {
    this.apiClient = apiClient;
    this.contextData = new Map();

    const optionDefaults = {
      contextRemembering: true,
      responseType: 'embed',
      maxLength: 20000
    };

    this.options = Object.assign(optionDefaults, options);
  }

  static splitText(text, size = 2000) {
    const chunks = [];
    for (let i = 0; i < text.length; i += size) {
      chunks.push(text.slice(i, i + size));
    }
    return chunks;
  }

  static async sendChunkedInteraction(interaction, text) {
    const chunks = ChatGPTClient.splitText(text, 2000);
    if (chunks.length === 0) return;
    await interaction.editReply(chunks.shift());
    for (const chunk of chunks) {
      await interaction.followUp(chunk);
    }
  }

  static async sendChunkedMessage(message, text) {
    const chunks = ChatGPTClient.splitText(text, 2000);
    for (const chunk of chunks) {
      await message.reply(chunk);
    }
  }

  static async init(openAIAPIKey, options) {
    if (!openAIAPIKey) {
      throw new TypeError("❌ OpenAI API Key fehlt!");
    }

    const { ChatGPTAPI } = await import('chatgpt');

    const apiClient = new ChatGPTAPI({ apiKey: openAIAPIKey });
    return new ChatGPTClient(apiClient, options);
  }

  async send(message, id) {
    try {
      console.log('🧠 Sende an OpenAI:', message);

      const response = await this.apiClient.sendMessage(message, {
        parentMessageId: id
      });

      console.log('✅ Antwort von OpenAI:', response.text);
      return response;
    } catch (err) {
      console.error('❌ Fehler bei OpenAI:', err);
      throw err;
    }
  }

  async chatInteraction(interaction, str) {
    const allowedChannelId = '1394040707680829450';
    if (interaction.channelId !== allowedChannelId) {
      await interaction.reply({
        content: '❌ Dieser Befehl ist in diesem Channel nicht erlaubt.',
        ephemeral: true
      });
      return;
    }

    if (!interaction.deferred) await interaction.deferReply();

    const context = this.contextData.get(interaction.user.id);
    const reply = await this.send(str, this.options.contextRemembering && context ? context : undefined);

    const text = this.options.maxLength
      ? reply.text.slice(0, this.options.maxLength)
      : reply.text;

    if (this.options.responseType === 'string') {
      await ChatGPTClient.sendChunkedInteraction(interaction, text);
    } else {
      const embed = new EmbedBuilder()
        .setColor(Colors.DarkerGrey)
        .addFields(
          { name: 'Input', value: str },
          {
            name: 'Response',
            value: reply.text.length > 1024
              ? reply.text.slice(0, 1021) + '...'
              : reply.text
          }
        )
        .setAuthor({
          iconURL: 'https://seeklogo.com/images/O/open-ai-logo-8B9BFEDC26-seeklogo.com.png',
          url: 'https://openai.com/blog/chatgpt',
          name: 'Message Sent to Chat-GPT'
        });

      await interaction.editReply({
        embeds: [embed]
      });
    }

    if (this.options.contextRemembering) {
      this.contextData.set(interaction.user.id, reply.id);
    }
  }

  async chatMessage(message, str) {
    const allowedChannelId = '1394040707680829450';
    if (message.channel.id !== allowedChannelId) return;

    const context = this.contextData.get(message.author.id);
    const response = await message.reply({
      content: '⌛'
    });

    const reply = await this.send(str || message.content, this.options.contextRemembering && context ? context : undefined);
    await response.delete().catch(() => null);

    const text = this.options.maxLength
      ? reply.text.slice(0, this.options.maxLength)
      : reply.text;

    if (this.options.responseType === 'string') {
      await ChatGPTClient.sendChunkedMessage(message, text);
    } else {
      const embed = new EmbedBuilder()
        .setColor(Colors.DarkerGrey)
        .setDescription(reply.text)
        .setAuthor({
          iconURL: 'https://seeklogo.com/images/O/open-ai-logo-8B9BFEDC26-seeklogo.com.png',
          url: 'https://openai.com/blog/chatgpt',
          name: 'Generated by Chat-GPT'
        });

      await message.reply({
        embeds: [embed]
      });
    }

    if (this.options.contextRemembering) {
      this.contextData.set(message.author.id, reply.id);
    }
  }
}

module.exports = {
  ChatGPTClient
};
